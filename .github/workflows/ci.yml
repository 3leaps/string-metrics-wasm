name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
    tags:
      - 'v*.*.*'

permissions:
  contents: read

jobs:
  # Quick validation job (runs first, fails fast)
  validate:
    name: Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Install wasm-pack
        run: cargo install wasm-pack --version 0.13.1

      - name: Install dependencies
        run: npm ci

      - name: Version sync check
        run: make version-check

      - name: License compliance check
        run: npm run license:check

  # Build and test matrix (Ubuntu, macOS, Windows)
  test:
    name: Test (${{ matrix.os }})
    needs: validate
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Install wasm-pack
        run: cargo install wasm-pack --version 0.13.1

      - name: Install dependencies
        run: npm ci

      - name: Format check
        run: make format-check

      - name: Lint
        run: make lint

      - name: Type check
        run: make typecheck

      - name: Rust format check
        run: cargo fmt -- --check

      - name: Rust clippy
        run: make rust-clippy

      - name: Build WASM
        run: npm run build:wasm

      - name: Build TypeScript
        run: npm run build:ts

      - name: Run tests
        run: npm test

      - name: Check package contents
        run: npm pack --dry-run

  # Release job (only on tags)
  release:
    name: Create Release
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Install wasm-pack
        run: cargo install wasm-pack --version 0.13.1

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: make build

      - name: Create package tarball
        run: npm pack

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: string-metrics-wasm-${{ steps.version.outputs.VERSION }}.tgz
          fail_on_unmatched_files: false
          body: |
            ## string-metrics-wasm ${{ github.ref_name }}

            ### Installation
            ```bash
            npm install string-metrics-wasm@${{ steps.version.outputs.VERSION }}
            ```

            ### What's New
            See [CHANGELOG.md](https://github.com/3leaps/string-metrics-wasm/blob/main/CHANGELOG.md) for detailed changes.

            ### Documentation
            - [README](https://github.com/3leaps/string-metrics-wasm#readme)
            - [API Documentation](https://github.com/3leaps/string-metrics-wasm#api-documentation)

            ### Verification
            ```bash
            # Install and test
            npm install string-metrics-wasm@${{ steps.version.outputs.VERSION }}
            node -e "const m = require('string-metrics-wasm'); console.log(m.levenshtein('hello', 'hallo'));"
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
